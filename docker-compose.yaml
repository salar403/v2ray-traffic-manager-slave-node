version: '3.3'

services:

  redis-slave:
    container_name: redis-slave
    restart: always
    image: redis:6.2.7
    volumes:
      - redis-slave-data:/data
    networks:
      - slave-network

  celery-main:
    container_name: celery-main
    build:
      context: '.'
      dockerfile: ./Dockerfile.celery
    restart: always
    environment:
      REDIS_HOST: "redis-slave"
      V2RAY_HOST: "v2ray"
    command: celery -A backend worker -l info -c 2 -Q main
    networks:
      - slave-network
    depends_on:
      - redis-slave
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  celery-beat:
    container_name: celery-beat
    build:
      context: '.'
      dockerfile: ./Dockerfile.backend
    restart: always
    environment:
      REDIS_HOST: "redis-slave"
      V2RAY_HOST: "v2ray"
    command: celery -A backend beat -l info
    depends_on:
      - celery-main
    networks:
      - slave-network

  rabbitmq-consumer:
    container_name: rabbitmq-consumer
    build:
      context: '.'
      dockerfile: ./Dockerfile.backend
    restart: always
    environment:
      REDIS_HOST: "redis-slave"
      V2RAY_HOST: "v2ray"
    command: ./manage.py rabbitmq-consumer
    networks:
      - slave-network
    depends_on:
      - redis-slave

  nginx:
    container_name: nginx
    restart: unless-stopped
    image: nginx:1.23.1
    volumes:
      - ./nginx-conf/:/etc/nginx/:ro
      - /root/cert:/ssl/:ro
    ports:
      - 80:80
      - 443:443
    networks:
      - backend-network

  v2ray-drak:
    container_name: v2ray-drak
    restart: always
    image: teddysun/xray
    volumes:
      - ./config.json:/etc/xray/config-drakjson
    networks:
      - slave-network

  v2ray-cloudflare:
    container_name: v2ray-cloudflare
    restart: always
    image: teddysun/xray
    volumes:
      - ./config.json:/etc/xray/config-cloudflare.json
    networks:
      - slave-network

networks:
  slave-network:
    external: True

volumes:
  redis-slave-data:
    external: True
